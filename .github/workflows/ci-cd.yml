name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'

jobs:
  lint-and-type-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd packages/shared && npm ci
          cd ../../apps/kb-api && npm ci
          cd ../app-api && npm ci
          cd ../ops-api && npm ci
          cd ../frontend && npm ci

      - name: TypeScript type checking
        run: |
          cd packages/shared && npm run build
          cd ../../apps/kb-api && npx tsc --noEmit
          cd ../app-api && npx tsc --noEmit
          cd ../ops-api && npx tsc --noEmit
          cd ../frontend && npx tsc --noEmit

      - name: ESLint checking
        run: |
          # Add ESLint configuration and run
          echo "ESLint would run here"

  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Run security audit
        run: |
          npm audit --audit-level=moderate
          cd apps/kb-api && npm audit --audit-level=moderate
          cd ../app-api && npm audit --audit-level=moderate
          cd ../ops-api && npm audit --audit-level=moderate
          cd ../frontend && npm audit --audit-level=moderate

      - name: Check for secrets
        run: |
          # Basic secret detection
          if grep -r "SECRET\|PASSWORD\|API_KEY" --include="*.ts" --include="*.js" --include="*.json" . | grep -v "example\|template\|env.example"; then
            echo "Potential secrets found - please review"
            exit 1
          fi

  build-and-test:
    runs-on: ubuntu-latest
    needs: [lint-and-type-check, security-scan]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd packages/shared && npm ci && npm run build
          cd ../../apps/kb-api && npm ci
          cd ../app-api && npm ci
          cd ../ops-api && npm ci
          cd ../frontend && npm ci

      - name: Build all services
        run: |
          # Build shared package
          cd packages/shared && npm run build
          
          # Build frontend
          cd ../../apps/frontend && npm run build
          
          echo "All builds completed successfully"

      - name: Run unit tests
        run: |
          # Add test commands when you have tests
          echo "Unit tests would run here"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            apps/frontend/dist
            packages/shared/dist

  deploy-staging:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Install wrangler
        run: npm install -g wrangler

      - name: Deploy to staging
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          # Deploy all services to staging
          chmod +x scripts/deploy.sh
          ./scripts/deploy.sh staging

  deploy-production:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Install wrangler
        run: npm install -g wrangler

      - name: Deploy to production
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          # Deploy all services to production
          chmod +x scripts/deploy.sh
          ./scripts/deploy.sh production